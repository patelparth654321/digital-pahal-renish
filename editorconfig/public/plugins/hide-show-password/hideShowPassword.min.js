!(function (t) {
  "function" == typeof define && define.amd ? define(["jquery"], t) : "object" == typeof exports ? t(require("jquery")) : t(jQuery);
})(function (n, o) {
  var s = "plugin_hideShowPassword",
    i = ["show", "innerToggle"],
    t = (function () {
      var t = document.body,
        e = document.createElement("input"),
        s = !0,
        e = (t = t || document.createElement("body")).appendChild(e);
      try {
        e.setAttribute("type", "text");
      } catch (t) {
        s = !1;
      }
      return t.removeChild(e), s;
    })();
  function a(t, e) {
    (this.element = n(t)), (this.wrapperElement = n()), (this.toggleElement = n()), this.init(e);
  }
  (a.prototype = {
    init: function (t) {
      this.update(t, n.fn.hideShowPassword.defaults) &&
        (this.element.addClass(this.options.className),
        this.options.innerToggle &&
          (this.wrapElement(this.options.wrapper),
          this.initToggle(this.options.toggle),
          "string" == typeof this.options.innerToggle &&
            (this.toggleElement.hide(),
            this.element.one(
              this.options.innerToggle,
              n.proxy(function () {
                this.toggleElement.show();
              }, this)
            ))),
        this.element.trigger(this.options.initEvent, [this]));
    },
    update: function (t, e) {
      return (this.options = this.prepareOptions(t, e)), this.updateElement() && this.element.trigger(this.options.changeEvent, [this]).trigger(this.state().changeEvent, [this]), this.options.enable;
    },
    toggle: function (t) {
      return this.update({ show: (t = t || "toggle") });
    },
    prepareOptions: function (t, e) {
      var s,
        o = t || {},
        i = [];
      if (
        ((e = e || this.options),
        (t = n.extend(!0, {}, e, t)),
        o.hasOwnProperty("wrapper") && o.wrapper.hasOwnProperty("inheritStyles") && (t.wrapper.inheritStyles = o.wrapper.inheritStyles),
        t.enable && ("toggle" === t.show ? (t.show = this.isType("hidden", t.states)) : "infer" === t.show && (t.show = this.isType("shown", t.states)), "infer" === t.toggle.position && (t.toggle.position = "rtl" === this.element.css("text-direction") ? "left" : "right"), !n.isArray(t.toggle.attachToKeyCodes)))
      ) {
        if (!0 === t.toggle.attachToKeyCodes)
          switch ((s = n(t.toggle.element)).prop("tagName").toLowerCase()) {
            case "button":
            case "input":
              break;
            case "a":
              if (s.filter("[href]").length) {
                i.push(32);
                break;
              }
            default:
              i.push(32, 13);
          }
        t.toggle.attachToKeyCodes = i;
      }
      return t;
    },
    updateElement: function () {
      return !(!this.options.enable || this.isType()) && (this.element.prop(n.extend({}, this.options.props, this.state().props)).addClass(this.state().className).removeClass(this.otherState().className), this.options.triggerOnToggle && this.element.trigger(this.options.triggerOnToggle, [this]), this.updateToggle(), !0);
    },
    isType: function (t, e) {
      return (e = e || this.options.states)[(t = t || this.state(o, o, e).props.type)] && (t = e[t].props.type), this.element.prop("type") === t;
    },
    state: function (t, e, s) {
      return (s = s || this.options.states), "boolean" == typeof (t = t === o ? this.options.show : t) && (t = t ? "shown" : "hidden"), s[(t = e ? ("shown" === t ? "hidden" : "shown") : t)];
    },
    otherState: function (t) {
      return this.state(t, !0);
    },
    wrapElement: function (s) {
      var t,
        e = s.enforceWidth;
      return (
        this.wrapperElement.length ||
          ((t = this.element.outerWidth()),
          n.each(
            s.inheritStyles,
            n.proxy(function (t, e) {
              s.styles[e] = this.element.css(e);
            }, this)
          ),
          this.element.css(s.innerElementStyles).wrap(n(s.element).addClass(s.className).css(s.styles)),
          (this.wrapperElement = this.element.parent()),
          !1 !== (e = !0 === e ? this.wrapperElement.outerWidth() !== t && t : e) && this.wrapperElement.css("width", e)),
        this.wrapperElement
      );
    },
    initToggle: function (t) {
      return (
        this.toggleElement.length ||
          ((this.toggleElement = n(t.element).attr(t.attr).addClass(t.className).css(t.styles).appendTo(this.wrapperElement)),
          this.updateToggle(),
          this.positionToggle(t.position, t.verticalAlign, t.offset),
          t.touchSupport ? (this.toggleElement.css(t.touchStyles), this.element.on(t.attachToTouchEvent, n.proxy(this.toggleTouchEvent, this))) : this.toggleElement.on(t.attachToEvent, n.proxy(this.toggleEvent, this)),
          t.attachToKeyCodes.length && this.toggleElement.on(t.attachToKeyEvent, n.proxy(this.toggleKeyEvent, this))),
        this.toggleElement
      );
    },
    positionToggle: function (t, e, s) {
      var o = {};
      switch (((o[t] = s), e)) {
        case "top":
        case "bottom":
          o[e] = s;
          break;
        case "middle":
          (o.top = "50%"), (o.marginTop = this.toggleElement.outerHeight() / -2);
      }
      return this.toggleElement.css(o);
    },
    updateToggle: function (t, e) {
      var s;
      return (
        this.toggleElement.length && ((s = "padding-" + this.options.toggle.position), (t = t || this.state().toggle), (e = e || this.otherState().toggle), this.toggleElement.attr(t.attr).addClass(t.className).removeClass(e.className).html(t.content), (t = this.toggleElement.outerWidth() + 2 * this.options.toggle.offset), this.element.css(s) !== t && this.element.css(s, t)), this.toggleElement
      );
    },
    toggleEvent: function (t) {
      t.preventDefault(), this.toggle();
    },
    toggleKeyEvent: function (s) {
      n.each(
        this.options.toggle.attachToKeyCodes,
        n.proxy(function (t, e) {
          if (s.which === e) return this.toggleEvent(s), !1;
        }, this)
      );
    },
    toggleTouchEvent: function (t) {
      var e,
        s,
        o = this.toggleElement.offset().left;
      o && ((s = t.pageX || t.originalEvent.pageX), (s = "left" === this.options.toggle.position ? ((e = s), (o += this.toggleElement.outerWidth())) : ((e = o), s)), e <= s && this.toggleEvent(t));
    },
  }),
    (n.fn.hideShowPassword = function () {
      var o = {};
      return (
        n.each(arguments, function (t, e) {
          var s = {};
          if ("object" == typeof e) s = e;
          else {
            if (!i[t]) return !1;
            s[i[t]] = e;
          }
          n.extend(!0, o, s);
        }),
        this.each(function () {
          var t = n(this),
            e = t.data(s);
          e ? e.update(o) : t.data(s, new a(this, o));
        })
      );
    }),
    n.each({ show: !0, hide: !1, toggle: "toggle" }, function (t, s) {
      n.fn[t + "Password"] = function (t, e) {
        return this.hideShowPassword(s, t, e);
      };
    }),
    (n.fn.hideShowPassword.defaults = {
      show: "infer",
      innerToggle: !1,
      enable: t,
      triggerOnToggle: !1,
      className: "hideShowPassword-field",
      initEvent: "hideShowPasswordInit",
      changeEvent: "passwordVisibilityChange",
      props: { autocapitalize: "off", autocomplete: "off", autocorrect: "off", spellcheck: "false" },
      toggle: {
        element: '<button type="button">',
        className: "hideShowPassword-toggle",
        touchSupport: "undefined" != typeof Modernizr && Modernizr.touchevents,
        attachToEvent: "click.hideShowPassword",
        attachToTouchEvent: "touchstart.hideShowPassword mousedown.hideShowPassword",
        attachToKeyEvent: "keyup",
        attachToKeyCodes: !0,
        styles: { position: "absolute" },
        touchStyles: { pointerEvents: "none" },
        position: "infer",
        verticalAlign: "middle",
        offset: 0,
        attr: { role: "button", "aria-label": "Show Password", title: "Show Password", tabIndex: 0 },
      },
      wrapper: { element: "<div>", className: "hideShowPassword-wrapper", enforceWidth: !0, styles: { position: "relative" }, inheritStyles: ["display", "verticalAlign", "marginTop", "marginRight", "marginBottom", "marginLeft"], innerElementStyles: { marginTop: 0, marginRight: 0, marginBottom: 0, marginLeft: 0 } },
      states: {
        shown: {
          className: "hideShowPassword-shown",
          changeEvent: "passwordShown",
          props: { type: "text" },
          toggle: {
            className: "hideShowPassword-toggle-hide",
            content:
              '<svg aria-hidden="true" class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"> <path stroke="none" d="M0 0h24v24H0z" fill="none"></path> <path d="M10.585 10.587a2 2 0 0 0 2.829 2.828"></path> <path d="M16.681 16.673a8.717 8.717 0 0 1 -4.681 1.327c-3.6 0 -6.6 -2 -9 -6c1.272 -2.12 2.712 -3.678 4.32 -4.674m2.86 -1.146a9.055 9.055 0 0 1 1.82 -.18c3.6 0 6.6 2 9 6c-.666 1.11 -1.379 2.067 -2.138 2.87"></path> <path d="M3 3l18 18"></path> </svg>',
            attr: { "aria-pressed": "true", title: "Hide Password" },
          },
        },
        hidden: {
          className: "hideShowPassword-hidden",
          changeEvent: "passwordHidden",
          props: { type: "password" },
          toggle: {
            className: "hideShowPassword-toggle-show",
            content:
              '<svg aria-hidden="true" class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"> <path stroke="none" d="M0 0h24v24H0z" fill="none"></path> <path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path> <path d="M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6"></path> </svg>',
            attr: { "aria-pressed": "false", title: "Show Password" },
          },
        },
      },
    });
});
